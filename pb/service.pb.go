// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Chunk
	File
	FileChunkData
	GenericResponse
	CreateFileResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Chunk struct {
	UUID     string   `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Size     int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Used     int64    `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Replicas []string `protobuf:"bytes,4,rep,name=replicas" json:"replicas,omitempty"`
	FileUUID string   `protobuf:"bytes,5,opt,name=FileUUID" json:"FileUUID,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Chunk) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Chunk) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Chunk) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Chunk) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *Chunk) GetFileUUID() string {
	if m != nil {
		return m.FileUUID
	}
	return ""
}

type File struct {
	UUID       string   `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	FileName   string   `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Size       int64    `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	ReplicaNum int32    `protobuf:"varint,4,opt,name=replica_num,json=replicaNum" json:"replica_num,omitempty"`
	CreatedAt  int64    `protobuf:"varint,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  int64    `protobuf:"varint,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Chunks     []*Chunk `protobuf:"bytes,7,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *File) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *File) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetReplicaNum() int32 {
	if m != nil {
		return m.ReplicaNum
	}
	return 0
}

func (m *File) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *File) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *File) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type FileChunkData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FileChunkData) Reset()                    { *m = FileChunkData{} }
func (m *FileChunkData) String() string            { return proto.CompactTextString(m) }
func (*FileChunkData) ProtoMessage()               {}
func (*FileChunkData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileChunkData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GenericResponse struct {
	Code int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  int64 `protobuf:"varint,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *GenericResponse) Reset()                    { *m = GenericResponse{} }
func (m *GenericResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()               {}
func (*GenericResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenericResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GenericResponse) GetMsg() int64 {
	if m != nil {
		return m.Msg
	}
	return 0
}

type CreateFileResponse struct {
	Code int64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  int64 `protobuf:"varint,2,opt,name=msg" json:"msg,omitempty"`
	File *File `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
}

func (m *CreateFileResponse) Reset()                    { *m = CreateFileResponse{} }
func (m *CreateFileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFileResponse) ProtoMessage()               {}
func (*CreateFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateFileResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateFileResponse) GetMsg() int64 {
	if m != nil {
		return m.Msg
	}
	return 0
}

func (m *CreateFileResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "pb.Chunk")
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*FileChunkData)(nil), "pb.FileChunkData")
	proto.RegisterType((*GenericResponse)(nil), "pb.GenericResponse")
	proto.RegisterType((*CreateFileResponse)(nil), "pb.CreateFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChunkServer service

type ChunkServerClient interface {
	CreateFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CreateFileClient, error)
	RemoveFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*GenericResponse, error)
	AppendFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_AppendFileClient, error)
}

type chunkServerClient struct {
	cc *grpc.ClientConn
}

func NewChunkServerClient(cc *grpc.ClientConn) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) CreateFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CreateFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChunkServer_serviceDesc.Streams[0], c.cc, "/pb.ChunkServer/CreateFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerCreateFileClient{stream}
	return x, nil
}

type ChunkServer_CreateFileClient interface {
	Send(*FileChunkData) error
	CloseAndRecv() (*CreateFileResponse, error)
	grpc.ClientStream
}

type chunkServerCreateFileClient struct {
	grpc.ClientStream
}

func (x *chunkServerCreateFileClient) Send(m *FileChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerCreateFileClient) CloseAndRecv() (*CreateFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) RemoveFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/pb.ChunkServer/RemoveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) AppendFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_AppendFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChunkServer_serviceDesc.Streams[1], c.cc, "/pb.ChunkServer/AppendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerAppendFileClient{stream}
	return x, nil
}

type ChunkServer_AppendFileClient interface {
	Send(*FileChunkData) error
	CloseAndRecv() (*GenericResponse, error)
	grpc.ClientStream
}

type chunkServerAppendFileClient struct {
	grpc.ClientStream
}

func (x *chunkServerAppendFileClient) Send(m *FileChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerAppendFileClient) CloseAndRecv() (*GenericResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GenericResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChunkServer service

type ChunkServerServer interface {
	CreateFile(ChunkServer_CreateFileServer) error
	RemoveFile(context.Context, *File) (*GenericResponse, error)
	AppendFile(ChunkServer_AppendFileServer) error
}

func RegisterChunkServerServer(s *grpc.Server, srv ChunkServerServer) {
	s.RegisterService(&_ChunkServer_serviceDesc, srv)
}

func _ChunkServer_CreateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).CreateFile(&chunkServerCreateFileServer{stream})
}

type ChunkServer_CreateFileServer interface {
	SendAndClose(*CreateFileResponse) error
	Recv() (*FileChunkData, error)
	grpc.ServerStream
}

type chunkServerCreateFileServer struct {
	grpc.ServerStream
}

func (x *chunkServerCreateFileServer) SendAndClose(m *CreateFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerCreateFileServer) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChunkServer_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChunkServer/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).RemoveFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_AppendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).AppendFile(&chunkServerAppendFileServer{stream})
}

type ChunkServer_AppendFileServer interface {
	SendAndClose(*GenericResponse) error
	Recv() (*FileChunkData, error)
	grpc.ServerStream
}

type chunkServerAppendFileServer struct {
	grpc.ServerStream
}

func (x *chunkServerAppendFileServer) SendAndClose(m *GenericResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerAppendFileServer) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChunkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveFile",
			Handler:    _ChunkServer_RemoveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFile",
			Handler:       _ChunkServer_CreateFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendFile",
			Handler:       _ChunkServer_AppendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x35, 0x4d, 0xd9, 0xb5, 0x4e, 0x35, 0xda, 0xb2, 0x40, 0x21, 0xb8, 0x2d, 0xaa, 0xaa, 0x8b,
	0x96, 0x7a, 0x70, 0x87, 0x16, 0xe8, 0x64, 0xd8, 0x68, 0x91, 0xc5, 0x03, 0x03, 0x03, 0xd9, 0x0c,
	0x5a, 0xba, 0x24, 0x42, 0x2c, 0x89, 0x10, 0x25, 0x0f, 0xc9, 0x67, 0xe5, 0x3b, 0xf2, 0x4f, 0x01,
	0x4f, 0xb2, 0x12, 0x24, 0xce, 0x90, 0xed, 0xdd, 0x3b, 0xde, 0xbd, 0xf7, 0x0e, 0x84, 0xb1, 0xc1,
	0x72, 0x9f, 0xc6, 0x38, 0xd5, 0x65, 0x51, 0x15, 0xa2, 0xaf, 0xb7, 0xe1, 0x0d, 0x0c, 0x16, 0x97,
	0x75, 0x7e, 0x25, 0x04, 0x38, 0xeb, 0xf5, 0xc9, 0xd2, 0x67, 0x01, 0x8b, 0x5c, 0x49, 0xd8, 0x72,
	0x26, 0xbd, 0x46, 0xbf, 0x1f, 0xb0, 0x88, 0x4b, 0xc2, 0x96, 0xab, 0x0d, 0x26, 0x3e, 0x6f, 0x38,
	0x8b, 0xc5, 0x04, 0x46, 0x25, 0xea, 0x5d, 0x1a, 0x2b, 0xe3, 0x3b, 0x01, 0x8f, 0x5c, 0xd9, 0xd5,
	0xb6, 0xf7, 0x2f, 0xdd, 0x21, 0xed, 0x1e, 0xd0, 0xee, 0xae, 0x0e, 0xef, 0x18, 0x38, 0xb6, 0x38,
	0x2a, 0xfe, 0x19, 0xdc, 0xf3, 0x74, 0x87, 0x9b, 0x5c, 0x65, 0x8d, 0x03, 0x57, 0x8e, 0x2c, 0xb1,
	0x52, 0x19, 0x76, 0xce, 0xf8, 0x23, 0x67, 0xdf, 0xc0, 0x6b, 0x55, 0x37, 0x79, 0x9d, 0xf9, 0x4e,
	0xc0, 0xa2, 0x81, 0x84, 0x96, 0x5a, 0xd5, 0x99, 0xf8, 0x0a, 0x10, 0x97, 0xa8, 0x2a, 0x4c, 0x36,
	0xaa, 0x22, 0x33, 0x5c, 0xba, 0x2d, 0x33, 0xaf, 0x6c, 0xbb, 0xd6, 0xc9, 0xa1, 0x3d, 0x6c, 0xda,
	0x2d, 0x33, 0xaf, 0xc4, 0x77, 0x18, 0xc6, 0xf6, 0x52, 0xc6, 0x7f, 0x13, 0xf0, 0xc8, 0x9b, 0xb9,
	0x53, 0xbd, 0x9d, 0xd2, 0xed, 0x64, 0xdb, 0x08, 0x7f, 0xc0, 0xd8, 0xc6, 0x21, 0x72, 0xa9, 0x2a,
	0x65, 0x6d, 0x26, 0xaa, 0x52, 0x94, 0xeb, 0xad, 0x24, 0x1c, 0xfe, 0x86, 0x77, 0xff, 0x31, 0xc7,
	0x32, 0x8d, 0x25, 0x1a, 0x5d, 0xe4, 0x86, 0xd2, 0xc4, 0x45, 0x82, 0xf4, 0x8c, 0x4b, 0xc2, 0xe2,
	0x3d, 0xf0, 0xcc, 0x5c, 0xb4, 0xa7, 0xb7, 0x30, 0x3c, 0x03, 0xb1, 0x20, 0xb3, 0x56, 0xe3, 0x75,
	0xb3, 0xe2, 0x0b, 0x38, 0xf6, 0x76, 0x74, 0x2f, 0x6f, 0x36, 0xb2, 0xd6, 0x69, 0x0b, 0xb1, 0xb3,
	0x5b, 0x06, 0x1e, 0x99, 0x3e, 0xc5, 0x72, 0x8f, 0xa5, 0xf8, 0x0b, 0xf0, 0xa0, 0x24, 0x3e, 0x1c,
	0x5e, 0x77, 0xb9, 0x26, 0x9f, 0x28, 0xfb, 0x33, 0x33, 0x61, 0x2f, 0x62, 0xe2, 0x27, 0x80, 0xc4,
	0xac, 0xd8, 0x37, 0xc3, 0x9d, 0xd4, 0xe4, 0xa3, 0x45, 0x4f, 0x92, 0x87, 0x3d, 0xf1, 0x07, 0x60,
	0xae, 0x35, 0xe6, 0xc9, 0x4b, 0x5a, 0xc7, 0xe7, 0x22, 0xb6, 0x1d, 0xd2, 0x2f, 0xfe, 0x75, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x86, 0x88, 0x66, 0x39, 0xd6, 0x02, 0x00, 0x00,
}
