// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Chunk struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Used                 int64    `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	Replicas             []string `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
	FileUUID             string   `protobuf:"bytes,5,opt,name=FileUUID,proto3" json:"FileUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{0}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (dst *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(dst, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Chunk) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Chunk) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Chunk) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *Chunk) GetFileUUID() string {
	if m != nil {
		return m.FileUUID
	}
	return ""
}

type File struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ReplicaNum           int32    `protobuf:"varint,4,opt,name=replica_num,json=replicaNum,proto3" json:"replica_num,omitempty"`
	CreatedAt            int64    `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Chunks               []*Chunk `protobuf:"bytes,7,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{1}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *File) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetReplicaNum() int32 {
	if m != nil {
		return m.ReplicaNum
	}
	return 0
}

func (m *File) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *File) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *File) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type FileChunkData struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunkData) Reset()         { *m = FileChunkData{} }
func (m *FileChunkData) String() string { return proto.CompactTextString(m) }
func (*FileChunkData) ProtoMessage()    {}
func (*FileChunkData) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{2}
}
func (m *FileChunkData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunkData.Unmarshal(m, b)
}
func (m *FileChunkData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunkData.Marshal(b, m, deterministic)
}
func (dst *FileChunkData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunkData.Merge(dst, src)
}
func (m *FileChunkData) XXX_Size() int {
	return xxx_messageInfo_FileChunkData.Size(m)
}
func (m *FileChunkData) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunkData.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunkData proto.InternalMessageInfo

func (m *FileChunkData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileChunkData) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type ReadFileRequest struct {
	FileUUID             string   `protobuf:"bytes,1,opt,name=FileUUID,proto3" json:"FileUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadFileRequest) Reset()         { *m = ReadFileRequest{} }
func (m *ReadFileRequest) String() string { return proto.CompactTextString(m) }
func (*ReadFileRequest) ProtoMessage()    {}
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{3}
}
func (m *ReadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadFileRequest.Unmarshal(m, b)
}
func (m *ReadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadFileRequest.Marshal(b, m, deterministic)
}
func (dst *ReadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadFileRequest.Merge(dst, src)
}
func (m *ReadFileRequest) XXX_Size() int {
	return xxx_messageInfo_ReadFileRequest.Size(m)
}
func (m *ReadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadFileRequest proto.InternalMessageInfo

func (m *ReadFileRequest) GetFileUUID() string {
	if m != nil {
		return m.FileUUID
	}
	return ""
}

type GenericResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{4}
}
func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericResponse.Unmarshal(m, b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
}
func (dst *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(dst, src)
}
func (m *GenericResponse) XXX_Size() int {
	return xxx_messageInfo_GenericResponse.Size(m)
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GenericResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CreateFileResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	File                 *File    `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFileResponse) Reset()         { *m = CreateFileResponse{} }
func (m *CreateFileResponse) String() string { return proto.CompactTextString(m) }
func (*CreateFileResponse) ProtoMessage()    {}
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_b7cdeaca6f0c3dc4, []int{5}
}
func (m *CreateFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFileResponse.Unmarshal(m, b)
}
func (m *CreateFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFileResponse.Marshal(b, m, deterministic)
}
func (dst *CreateFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFileResponse.Merge(dst, src)
}
func (m *CreateFileResponse) XXX_Size() int {
	return xxx_messageInfo_CreateFileResponse.Size(m)
}
func (m *CreateFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFileResponse proto.InternalMessageInfo

func (m *CreateFileResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateFileResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CreateFileResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "pb.Chunk")
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*FileChunkData)(nil), "pb.FileChunkData")
	proto.RegisterType((*ReadFileRequest)(nil), "pb.ReadFileRequest")
	proto.RegisterType((*GenericResponse)(nil), "pb.GenericResponse")
	proto.RegisterType((*CreateFileResponse)(nil), "pb.CreateFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkServerClient is the client API for ChunkServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkServerClient interface {
	CreateFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CreateFileClient, error)
	RemoveFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*GenericResponse, error)
	AppendFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_AppendFileClient, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (ChunkServer_ReadFileClient, error)
}

type chunkServerClient struct {
	cc *grpc.ClientConn
}

func NewChunkServerClient(cc *grpc.ClientConn) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) CreateFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CreateFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[0], "/pb.ChunkServer/CreateFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerCreateFileClient{stream}
	return x, nil
}

type ChunkServer_CreateFileClient interface {
	Send(*FileChunkData) error
	CloseAndRecv() (*CreateFileResponse, error)
	grpc.ClientStream
}

type chunkServerCreateFileClient struct {
	grpc.ClientStream
}

func (x *chunkServerCreateFileClient) Send(m *FileChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerCreateFileClient) CloseAndRecv() (*CreateFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) RemoveFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/pb.ChunkServer/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) AppendFile(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_AppendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[1], "/pb.ChunkServer/AppendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerAppendFileClient{stream}
	return x, nil
}

type ChunkServer_AppendFileClient interface {
	Send(*FileChunkData) error
	CloseAndRecv() (*GenericResponse, error)
	grpc.ClientStream
}

type chunkServerAppendFileClient struct {
	grpc.ClientStream
}

func (x *chunkServerAppendFileClient) Send(m *FileChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerAppendFileClient) CloseAndRecv() (*GenericResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GenericResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (ChunkServer_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[2], "/pb.ChunkServer/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkServer_ReadFileClient interface {
	Recv() (*FileChunkData, error)
	grpc.ClientStream
}

type chunkServerReadFileClient struct {
	grpc.ClientStream
}

func (x *chunkServerReadFileClient) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkServerServer is the server API for ChunkServer service.
type ChunkServerServer interface {
	CreateFile(ChunkServer_CreateFileServer) error
	RemoveFile(context.Context, *File) (*GenericResponse, error)
	AppendFile(ChunkServer_AppendFileServer) error
	ReadFile(*ReadFileRequest, ChunkServer_ReadFileServer) error
}

func RegisterChunkServerServer(s *grpc.Server, srv ChunkServerServer) {
	s.RegisterService(&_ChunkServer_serviceDesc, srv)
}

func _ChunkServer_CreateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).CreateFile(&chunkServerCreateFileServer{stream})
}

type ChunkServer_CreateFileServer interface {
	SendAndClose(*CreateFileResponse) error
	Recv() (*FileChunkData, error)
	grpc.ServerStream
}

type chunkServerCreateFileServer struct {
	grpc.ServerStream
}

func (x *chunkServerCreateFileServer) SendAndClose(m *CreateFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerCreateFileServer) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChunkServer_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChunkServer/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).RemoveFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_AppendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).AppendFile(&chunkServerAppendFileServer{stream})
}

type ChunkServer_AppendFileServer interface {
	SendAndClose(*GenericResponse) error
	Recv() (*FileChunkData, error)
	grpc.ServerStream
}

type chunkServerAppendFileServer struct {
	grpc.ServerStream
}

func (x *chunkServerAppendFileServer) SendAndClose(m *GenericResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerAppendFileServer) Recv() (*FileChunkData, error) {
	m := new(FileChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChunkServer_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkServerServer).ReadFile(m, &chunkServerReadFileServer{stream})
}

type ChunkServer_ReadFileServer interface {
	Send(*FileChunkData) error
	grpc.ServerStream
}

type chunkServerReadFileServer struct {
	grpc.ServerStream
}

func (x *chunkServerReadFileServer) Send(m *FileChunkData) error {
	return x.ServerStream.SendMsg(m)
}

var _ChunkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveFile",
			Handler:    _ChunkServer_RemoveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFile",
			Handler:       _ChunkServer_CreateFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendFile",
			Handler:       _ChunkServer_AppendFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _ChunkServer_ReadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_b7cdeaca6f0c3dc4) }

var fileDescriptor_service_b7cdeaca6f0c3dc4 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xed, 0xec, 0xa4, 0xb5, 0xb9, 0x71, 0x59, 0x1d, 0x41, 0x42, 0x54, 0x8c, 0xf3, 0x94, 0x97,
	0x2d, 0x52, 0x41, 0x05, 0x5f, 0x2c, 0xbb, 0x28, 0xbe, 0xec, 0xc3, 0xc8, 0x82, 0x6f, 0x65, 0x9a,
	0x5c, 0x35, 0xd8, 0x24, 0x63, 0x66, 0xd2, 0x07, 0xfd, 0x8d, 0xfe, 0x12, 0xff, 0x84, 0xcc, 0x4d,
	0x1a, 0xb5, 0xbb, 0x0a, 0xfb, 0x76, 0xe6, 0xdc, 0x8f, 0x73, 0xee, 0x09, 0x81, 0x63, 0x8b, 0xed,
	0xae, 0xcc, 0x71, 0x61, 0xda, 0xc6, 0x35, 0xe2, 0xc8, 0x6c, 0xe4, 0x77, 0x98, 0x9e, 0x7d, 0xee,
	0xea, 0x2f, 0x42, 0x40, 0x70, 0x79, 0xf9, 0xee, 0x3c, 0x66, 0x29, 0xcb, 0x42, 0x45, 0xd8, 0x73,
	0xb6, 0xfc, 0x86, 0xf1, 0x51, 0xca, 0x32, 0xae, 0x08, 0x7b, 0xae, 0xb3, 0x58, 0xc4, 0xbc, 0xe7,
	0x3c, 0x16, 0x09, 0xcc, 0x5b, 0x34, 0xdb, 0x32, 0xd7, 0x36, 0x0e, 0x52, 0x9e, 0x85, 0x6a, 0x7c,
	0xfb, 0xda, 0x9b, 0x72, 0x8b, 0xb4, 0x7b, 0x4a, 0xbb, 0xc7, 0xb7, 0xfc, 0xc1, 0x20, 0xf0, 0x8f,
	0x6b, 0xc5, 0x1f, 0x40, 0xf8, 0xb1, 0xdc, 0xe2, 0xba, 0xd6, 0x55, 0xef, 0x20, 0x54, 0x73, 0x4f,
	0x5c, 0xe8, 0x0a, 0x47, 0x67, 0xfc, 0x0f, 0x67, 0x8f, 0x21, 0x1a, 0x54, 0xd7, 0x75, 0x57, 0xc5,
	0x41, 0xca, 0xb2, 0xa9, 0x82, 0x81, 0xba, 0xe8, 0x2a, 0xf1, 0x08, 0x20, 0x6f, 0x51, 0x3b, 0x2c,
	0xd6, 0xda, 0x91, 0x19, 0xae, 0xc2, 0x81, 0x59, 0x39, 0x5f, 0xee, 0x4c, 0xb1, 0x2f, 0xcf, 0xfa,
	0xf2, 0xc0, 0xac, 0x9c, 0x78, 0x02, 0xb3, 0xdc, 0x27, 0x65, 0xe3, 0x5b, 0x29, 0xcf, 0xa2, 0x65,
	0xb8, 0x30, 0x9b, 0x05, 0x65, 0xa7, 0x86, 0x82, 0x7c, 0x0d, 0xc7, 0xfe, 0x1c, 0x22, 0xcf, 0xb5,
	0xd3, 0xde, 0x66, 0xa1, 0x9d, 0xa6, 0xbb, 0x6e, 0x2b, 0xc2, 0xff, 0xbd, 0x4b, 0x9e, 0xc2, 0x89,
	0x42, 0x5d, 0xf8, 0x2d, 0x0a, 0xbf, 0x76, 0x68, 0xdd, 0x5f, 0x01, 0xb2, 0x83, 0x00, 0x5f, 0xc0,
	0xc9, 0x5b, 0xac, 0xb1, 0x2d, 0x73, 0x85, 0xd6, 0x34, 0xb5, 0xa5, 0x64, 0xf2, 0xa6, 0x40, 0x6a,
	0xe5, 0x8a, 0xb0, 0xb8, 0x03, 0xbc, 0xb2, 0x9f, 0x06, 0x31, 0x0f, 0xe5, 0x07, 0x10, 0x67, 0x74,
	0x78, 0xaf, 0x74, 0x93, 0x59, 0xf1, 0x10, 0x02, 0xef, 0x97, 0xb2, 0x8f, 0x96, 0x73, 0x1f, 0x03,
	0x6d, 0x21, 0x76, 0xf9, 0x93, 0x41, 0x44, 0x01, 0xbc, 0xc7, 0x76, 0x87, 0xad, 0x78, 0x05, 0xf0,
	0x5b, 0x49, 0xdc, 0xdd, 0x77, 0x8f, 0x19, 0x25, 0xf7, 0x29, 0xc7, 0x2b, 0x66, 0xe4, 0x24, 0x63,
	0xe2, 0x14, 0x40, 0x61, 0xd5, 0xec, 0xfa, 0xe1, 0x51, 0x2a, 0xb9, 0xe7, 0xd1, 0xc1, 0xe5, 0x72,
	0x22, 0x5e, 0x02, 0xac, 0x8c, 0xc1, 0xba, 0xf8, 0x97, 0xd6, 0xf5, 0x73, 0x19, 0x13, 0xcf, 0x61,
	0xbe, 0xcf, 0x5d, 0x50, 0xd3, 0xc1, 0x57, 0x48, 0xae, 0x2e, 0x93, 0x93, 0xa7, 0x6c, 0x33, 0xa3,
	0x3f, 0xe9, 0xd9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x7e, 0x01, 0xc5, 0x5a, 0x03, 0x00,
	0x00,
}
